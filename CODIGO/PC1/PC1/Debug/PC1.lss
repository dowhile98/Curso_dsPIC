
PC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000032  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000024  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000024  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.count    00000001  00800100  00800100  000001b4  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_1>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_2>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  58:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  5c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  60:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000013c <__bad_interrupt>:
 13c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c2 <main>:

uint8_t count = 0;

int main(void)
{
	cli();						//disable interrupts
  c2:	f8 94       	cli
	/*PD2, PD3 -> ENTRADA DIGITAL CON PULL UP*/
	DDRD &=~ (1U<<3 | 1U<<2);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	83 7f       	andi	r24, 0xF3	; 243
  c8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1U<<3 | 1U<<2;		//PULL UP ENABLE
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	8c 60       	ori	r24, 0x0C	; 12
  ce:	8b b9       	out	0x0b, r24	; 11
	//INT0
	EICRA |= 1U<<ISC01;			//falling edge sensitivity (INT0)
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
	EIMSK |= 1U<<INT0;			//mask INT0
  da:	8d b3       	in	r24, 0x1d	; 29
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8d bb       	out	0x1d, r24	; 29
	//INT1
	EICRA |= 1U<<ISC11;			//falling edge sensitivity (INT0)
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
	EIMSK |= 1U<<INT1;			//mask INT0
  e6:	8d b3       	in	r24, 0x1d	; 29
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8d bb       	out	0x1d, r24	; 29
	/*PB0-PB7 -> DIGITAL OUTPUT*/
	DDRB = 0xFFU;				//SALIDA DIGITAL
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	sei();						//habilita las interrupciones
  f0:	78 94       	sei
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x30>

Disassembly of section .text.__vector_1:

000000f4 <__vector_1>:

/************************************************************************/
/*								ISR                                     */
/************************************************************************/
/*ISR INT0*/
ISR(INT0_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	count = count +1;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB = count;
 10a:	85 b9       	out	0x05, r24	; 5
}
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

Disassembly of section .text.__vector_2:

00000118 <__vector_2>:
/*ISR INT1*/
ISR(INT1_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	count = count - 1;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB = count;
 12e:	85 b9       	out	0x05, r24	; 5
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti
