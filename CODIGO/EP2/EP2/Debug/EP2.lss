
EP2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000970  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000664  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000010a  0000010a  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000008a  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#define BL		4

int main(void)
{
	/*PD0-PD3->ENTRADA DIGITAL CON PULL UP*/
	DDRD &=~(0xF);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0xF;
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8f 60       	ori	r24, 0x0F	; 15
  8a:	84 b9       	out	0x04, r24	; 4
	/*PB0-PB4-> SALIDA DIGITAL*/
	DDRB |= 0x1F;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8f 61       	ori	r24, 0x1F	; 31
  90:	84 b9       	out	0x04, r24	; 4
	
    while(1)
    {
        //I
		if(I){
  92:	48 99       	sbic	0x09, 0	; 9
  94:	09 c0       	rjmp	.+18     	; 0xa8 <main+0x28>
			PORTB |= 1U<<BR;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	87 ea       	ldi	r24, 0xA7	; 167
  9e:	91 e6       	ldi	r25, 0x61	; 97
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(100);
			
		}
		//a
		if(a){
  a8:	49 99       	sbic	0x09, 1	; 9
  aa:	12 c0       	rjmp	.+36     	; 0xd0 <main+0x50>
			PORTB &=~ 1u<<SR;		//subida rapida
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	85 b9       	out	0x05, r24	; 5
			PORTB &=~ (1U<<M);		//se apaga el rele
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 b9       	out	0x05, r24	; 5
			PORTB |= 1U<<A;			//AVISO
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 b9       	out	0x05, r24	; 5
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	93 ec       	ldi	r25, 0xC3	; 195
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x42>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
			_delay_ms(200);			//DURACION DEL AVISO
			PORTB &=~ (1U<<A);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 b9       	out	0x05, r24	; 5
		}
		//b
		if(b){
  d0:	4a 99       	sbic	0x09, 2	; 9
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <main+0x72>
			PORTB |= 1U<<M;			//enciende el rele
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	85 b9       	out	0x05, r24	; 5
			PORTB &=~ (1U<<BR);		//apaga el descenso rapido
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 b9       	out	0x05, r24	; 5
			PORTB |= 1U<<BL;		//descenso lento
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	87 ea       	ldi	r24, 0xA7	; 167
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x6a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
			_delay_ms(100);
		}
		//c
		if(c){
  f2:	4b 99       	sbic	0x09, 3	; 9
  f4:	ce cf       	rjmp	.-100    	; 0x92 <main+0x12>
			PORTB |= 1U<<M;			//taladro encendido
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 b9       	out	0x05, r24	; 5
			PORTB &=~ 1U<<BL;		//se apaga descenso lento
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 7e       	andi	r24, 0xE0	; 224
 100:	85 b9       	out	0x05, r24	; 5
			PORTB |= 1u<<SR;		//subida rapida
 102:	85 b1       	in	r24, 0x05	; 5
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 b9       	out	0x05, r24	; 5
 108:	c4 cf       	rjmp	.-120    	; 0x92 <main+0x12>
