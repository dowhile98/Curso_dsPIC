
IO_PORTS_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000209  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000922  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000666  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000092  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000c2 <main>:
uint8_t num;

int main(void)
{
	/*PB0-PB3 -> SALIDA*/
	DDRB |= 1U<<3 | 1U<<2 | 1U<<1 | 1U;
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	8f 60       	ori	r24, 0x0F	; 15
  c6:	84 b9       	out	0x04, r24	; 4
	/*PD0-PD3 -> ENTRADA CON PULL UP*/
	DDRD &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1U<<3 | 1U<<2 | 1U<<1 | 1U; //RESISTENCIAS PULL UP
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 60       	ori	r24, 0x0F	; 15
  d2:	8b b9       	out	0x0b, r24	; 11
	
    while(1)
    {
        //TODO:: Please write your application code 
		num = PIND  & 0x0F;  // PID & 0b00001111
  d4:	89 b1       	in	r24, 0x09	; 9
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ec       	ldi	r24, 0xC3	; 195
  e0:	99 e0       	ldi	r25, 0x09	; 9
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x20>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2a>
  ec:	00 00       	nop
		_delay_ms(200);
		switch(num){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	85 30       	cpi	r24, 0x05	; 5
  f4:	e9 f0       	breq	.+58     	; 0x130 <main+0x6e>
  f6:	28 f4       	brcc	.+10     	; 0x102 <main+0x40>
  f8:	88 23       	and	r24, r24
  fa:	41 f0       	breq	.+16     	; 0x10c <main+0x4a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	89 f0       	breq	.+34     	; 0x122 <main+0x60>
 100:	25 c0       	rjmp	.+74     	; 0x14c <main+0x8a>
 102:	86 30       	cpi	r24, 0x06	; 6
 104:	e1 f0       	breq	.+56     	; 0x13e <main+0x7c>
 106:	8f 30       	cpi	r24, 0x0F	; 15
 108:	29 f0       	breq	.+10     	; 0x114 <main+0x52>
 10a:	20 c0       	rjmp	.+64     	; 0x14c <main+0x8a>
			case 0:
				PORTB |= 0xF;
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	8f 60       	ori	r24, 0x0F	; 15
 110:	85 b9       	out	0x05, r24	; 5
				break;
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <main+0x12>
			case 0xF:
				PORTB &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	85 b9       	out	0x05, r24	; 5
				PORTB |= 0xA;				//0b1010
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8a 60       	ori	r24, 0x0A	; 10
 11e:	85 b9       	out	0x05, r24	; 5
				break;
 120:	d9 cf       	rjmp	.-78     	; 0xd4 <main+0x12>
			case 2:
				PORTB &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	85 b9       	out	0x05, r24	; 5
				PORTB |= 0x3;				//0b0011
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	85 b9       	out	0x05, r24	; 5
				break;
 12e:	d2 cf       	rjmp	.-92     	; 0xd4 <main+0x12>
			case 5:
				PORTB &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	85 b9       	out	0x05, r24	; 5
				PORTB |= 0x1;
 136:	85 b1       	in	r24, 0x05	; 5
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	85 b9       	out	0x05, r24	; 5
				break;
 13c:	cb cf       	rjmp	.-106    	; 0xd4 <main+0x12>
			case 6:
				PORTB &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	85 b9       	out	0x05, r24	; 5
				PORTB |= 0xC;				//0b1100
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8c 60       	ori	r24, 0x0C	; 12
 148:	85 b9       	out	0x05, r24	; 5
				break;
 14a:	c4 cf       	rjmp	.-120    	; 0xd4 <main+0x12>
			default:
				PORTB &=~ (1U<<3 | 1U<<2 | 1U<<1 | 1U);
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	85 b9       	out	0x05, r24	; 5
 152:	c0 cf       	rjmp	.-128    	; 0xd4 <main+0x12>
