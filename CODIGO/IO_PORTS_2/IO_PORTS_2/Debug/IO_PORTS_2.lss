
IO_PORTS_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c6  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002aa  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000069  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.SET_Value 00000044  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    000000a8  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SET_Value:

0000016a <SET_Value>:
/** 
  * @brief establer los valores de los pines
  */
void SET_Value(uint8_t value){
	/*borras el estado anterior*/
	PORTB &=~ (1U<<4 | 1U<<2  | 1U);
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	9a 7e       	andi	r25, 0xEA	; 234
 16e:	95 b9       	out	0x05, r25	; 5
	PORTC &=~ (1U);
 170:	98 b1       	in	r25, 0x08	; 8
 172:	9e 7f       	andi	r25, 0xFE	; 254
 174:	98 b9       	out	0x08, r25	; 8
	/*estableces el nuevo valor*/
	//BIT0
	PORTB |= (value & 0x1)<<0;
 176:	95 b1       	in	r25, 0x05	; 5
 178:	28 2f       	mov	r18, r24
 17a:	21 70       	andi	r18, 0x01	; 1
 17c:	92 2b       	or	r25, r18
 17e:	95 b9       	out	0x05, r25	; 5
	//BIT1
	PORTB |= (value>>1 & 1U)<<2;
 180:	25 b1       	in	r18, 0x05	; 5
 182:	81 fb       	bst	r24, 1
 184:	99 27       	eor	r25, r25
 186:	90 f9       	bld	r25, 0
 188:	99 0f       	add	r25, r25
 18a:	99 0f       	add	r25, r25
 18c:	92 2b       	or	r25, r18
 18e:	95 b9       	out	0x05, r25	; 5
	//BIT2
	PORTB |= (value>>2 & 1U)<<4;
 190:	25 b1       	in	r18, 0x05	; 5
 192:	82 fb       	bst	r24, 2
 194:	99 27       	eor	r25, r25
 196:	90 f9       	bld	r25, 0
 198:	92 95       	swap	r25
 19a:	90 7f       	andi	r25, 0xF0	; 240
 19c:	92 2b       	or	r25, r18
 19e:	95 b9       	out	0x05, r25	; 5
	//BIT3
	PORTC |= (value>>3 & 1U)<<0;
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	83 fb       	bst	r24, 3
 1a4:	88 27       	eor	r24, r24
 1a6:	80 f9       	bld	r24, 0
 1a8:	89 2b       	or	r24, r25
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:


int main(void)
{
	/*PB0,PD2,PB4 -> SALIDA*/
	DDRB |= 1U<<4  | 1U<<2 | 1U;
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	85 61       	ori	r24, 0x15	; 21
  c6:	84 b9       	out	0x04, r24	; 4
	/*PC0 -> SALIDA*/
	DDRC |= 1U<<0;
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	87 b9       	out	0x07, r24	; 7
	/*PD0,PD2, PD4,PD6-> ENTRADA CON PULL UP*/
	DDRD &=~ (1U<<6 | 1U<<4 | 1U<<2 | 1U);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	8a 7a       	andi	r24, 0xAA	; 170
  d2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1U<<6 | 1U<<4 | 1U<<2 | 1U; //RESISTENCIAS PULL UP
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	85 65       	ori	r24, 0x55	; 85
  d8:	8b b9       	out	0x0b, r24	; 11
	
    while(1)
    {
        //TODO:: Please write your application code 
		num = (PIND>>6 & 0x1)<<3 | (PIND>>4 & 0x1U)<<2 | (PIND>>2)<<1 | (PIND & 0x1U);  // PID & 0b00001111
  da:	89 b1       	in	r24, 0x09	; 9
  dc:	29 b1       	in	r18, 0x09	; 9
  de:	99 b1       	in	r25, 0x09	; 9
  e0:	39 b1       	in	r19, 0x09	; 9
  e2:	86 fb       	bst	r24, 6
  e4:	88 27       	eor	r24, r24
  e6:	80 f9       	bld	r24, 0
  e8:	88 0f       	add	r24, r24
  ea:	88 0f       	add	r24, r24
  ec:	88 0f       	add	r24, r24
  ee:	22 95       	swap	r18
  f0:	21 70       	andi	r18, 0x01	; 1
  f2:	22 0f       	add	r18, r18
  f4:	22 0f       	add	r18, r18
  f6:	82 2b       	or	r24, r18
  f8:	96 95       	lsr	r25
  fa:	96 95       	lsr	r25
  fc:	99 0f       	add	r25, r25
  fe:	89 2b       	or	r24, r25
 100:	93 2f       	mov	r25, r19
 102:	91 70       	andi	r25, 0x01	; 1
 104:	89 2b       	or	r24, r25
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x4e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x58>
 11a:	00 00       	nop
		_delay_ms(200);
		switch(num){
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	99 f0       	breq	.+38     	; 0x14a <main+0x88>
 124:	28 f4       	brcc	.+10     	; 0x130 <main+0x6e>
 126:	88 23       	and	r24, r24
 128:	41 f0       	breq	.+16     	; 0x13a <main+0x78>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	51 f0       	breq	.+20     	; 0x142 <main+0x80>
 12e:	19 c0       	rjmp	.+50     	; 0x162 <main+0xa0>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	79 f0       	breq	.+30     	; 0x152 <main+0x90>
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	89 f0       	breq	.+34     	; 0x15a <main+0x98>
 138:	14 c0       	rjmp	.+40     	; 0x162 <main+0xa0>
			case 0:
				SET_Value(0x2);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
				break;
 140:	cc cf       	rjmp	.-104    	; 0xda <main+0x18>
			case 1:
				SET_Value(0xA);
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
				break;
 148:	c8 cf       	rjmp	.-112    	; 0xda <main+0x18>
			case 2:
				SET_Value(0xB);				//0b0011
 14a:	8b e0       	ldi	r24, 0x0B	; 11
 14c:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
				break;
 150:	c4 cf       	rjmp	.-120    	; 0xda <main+0x18>
			case 3:
				SET_Value(0x7);
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
				break;
 158:	c0 cf       	rjmp	.-128    	; 0xda <main+0x18>
			case 4:
				SET_Value(0x5);				//0b1100
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
				break;
 160:	bc cf       	rjmp	.-136    	; 0xda <main+0x18>
			default:
				SET_Value(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
 168:	b8 cf       	rjmp	.-144    	; 0xda <main+0x18>
