
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d1c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000d1c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000062  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001354  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  000021d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bd  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022e  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c9  00000000  00000000  00003612  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000c64  00000c64  00000d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.LCD_InitPinout 0000004a  00000a32  00000a32  00000ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_Out_Data4 0000004c  000009e6  000009e6  00000a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_pulse_EN 0000001a  00000c0c  00000c0c  00000cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_Write_Byte 00000020  00000bec  00000bec  00000ca0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_Write_Cmd 00000018  00000c40  00000c40  00000cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_printChar 0000000c  00000c58  00000c58  00000d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_Init 00000138  0000071e  0000071e  000007d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Set_Cursor 00000028  00000bc4  00000bc4  00000c78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_printStr 0000001a  00000c26  00000c26  00000cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000008  00000165  00000165  00000219  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.LCD_printInt 0000005c  0000098a  0000098a  00000a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data.UserFont 00000040  00000125  00000125  000001d9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .progmemx.data 0000005d  000000c8  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .text.main    00000168  000005b6  000005b6  0000066a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_1 0000002c  00000b98  00000b98  00000c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .data.count   00000001  00800116  0000016d  00000221  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .text.avrlibc 00000032  00000b66  00000b66  00000c1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc 00000046  00000a7c  00000a7c  00000b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc 00000448  0000016e  0000016e  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc 00000036  00000afa  00000afa  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc 00000078  00000912  00000912  000009c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 000000bc  00000856  00000856  0000090a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.prologue 00000038  00000ac2  00000ac2  00000b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc.prologue 00000036  00000b30  00000b30  00000be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_1>
   8:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
   c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  10:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  14:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  18:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  1c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  20:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  24:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  2c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  30:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  34:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  38:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  3c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  40:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  44:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  48:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  4c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  50:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  54:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  58:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  5c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  60:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>
  64:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 16       	cp	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	16 01       	movw	r2, r12
  70:	17 00       	.word	0x0017	; ????
  72:	01 6d       	ori	r16, 0xD1	; 209

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000c64 <__bad_interrupt>:
 c64:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_InitPinout:

00000a32 <LCD_InitPinout>:
@returns: none
@verbatim
 * esta funcion inicializa los pines elegidos para la conexion con la lcd
 */
static void LCD_InitPinout(void){
	LCD_RS_DDR |= 1U<<LCD_RS_PIN;
 a32:	84 b1       	in	r24, 0x04	; 4
 a34:	82 60       	ori	r24, 0x02	; 2
 a36:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= 1U<<LCD_EN_PIN;
 a38:	84 b1       	in	r24, 0x04	; 4
 a3a:	84 60       	ori	r24, 0x04	; 4
 a3c:	84 b9       	out	0x04, r24	; 4
	LCD_D4_DDR |= 1U<<LCD_D4_PIN;
 a3e:	84 b1       	in	r24, 0x04	; 4
 a40:	80 62       	ori	r24, 0x20	; 32
 a42:	84 b9       	out	0x04, r24	; 4
	LCD_D5_DDR |= 1U<<LCD_D5_PIN;
 a44:	87 b1       	in	r24, 0x07	; 7
 a46:	81 60       	ori	r24, 0x01	; 1
 a48:	87 b9       	out	0x07, r24	; 7
	LCD_D6_DDR |= 1U<<LCD_D6_PIN;
 a4a:	87 b1       	in	r24, 0x07	; 7
 a4c:	82 60       	ori	r24, 0x02	; 2
 a4e:	87 b9       	out	0x07, r24	; 7
	LCD_D7_DDR |= 1U<<LCD_D7_PIN;
 a50:	87 b1       	in	r24, 0x07	; 7
 a52:	88 60       	ori	r24, 0x08	; 8
 a54:	87 b9       	out	0x07, r24	; 7
	/*CLEAR PIN VALUES*/
	LCD_RS_PORT &=~ (1U<<LCD_RS_PIN);
 a56:	85 b1       	in	r24, 0x05	; 5
 a58:	8d 7f       	andi	r24, 0xFD	; 253
 a5a:	85 b9       	out	0x05, r24	; 5
	LCD_EN_PORT &=~ (1U<<LCD_EN_PIN);
 a5c:	85 b1       	in	r24, 0x05	; 5
 a5e:	8b 7f       	andi	r24, 0xFB	; 251
 a60:	85 b9       	out	0x05, r24	; 5
	LCD_D4_PORT &=~ (1U<<LCD_D4_PIN);
 a62:	85 b1       	in	r24, 0x05	; 5
 a64:	8f 7d       	andi	r24, 0xDF	; 223
 a66:	85 b9       	out	0x05, r24	; 5
	LCD_D5_PORT &=~ (1U<<LCD_D5_PIN);
 a68:	88 b1       	in	r24, 0x08	; 8
 a6a:	8e 7f       	andi	r24, 0xFE	; 254
 a6c:	88 b9       	out	0x08, r24	; 8
	LCD_D6_PORT &=~ (1U<<LCD_D6_PIN);
 a6e:	88 b1       	in	r24, 0x08	; 8
 a70:	8d 7f       	andi	r24, 0xFD	; 253
 a72:	88 b9       	out	0x08, r24	; 8
	LCD_D7_PORT &=~ (1U<<LCD_D7_PIN);
 a74:	88 b1       	in	r24, 0x08	; 8
 a76:	87 7f       	andi	r24, 0xF7	; 247
 a78:	88 b9       	out	0x08, r24	; 8
 a7a:	08 95       	ret

Disassembly of section .text.LCD_Out_Data4:

000009e6 <LCD_Out_Data4>:
/**
 * @brief EST FUNCION NOS SIRVE PARA ENVIAR UN NIBLE A LA PANTALLA
 */
static void LCD_Out_Data4(unsigned char val){
	/*BIT[0]*/
	LCD_D4_PORT &=~(1U<<LCD_D4_PIN);
 9e6:	95 b1       	in	r25, 0x05	; 5
 9e8:	9f 7d       	andi	r25, 0xDF	; 223
 9ea:	95 b9       	out	0x05, r25	; 5
	LCD_D4_PORT |= (((val>>0)&0x01U)<<LCD_D4_PIN);
 9ec:	25 b1       	in	r18, 0x05	; 5
 9ee:	98 2f       	mov	r25, r24
 9f0:	91 70       	andi	r25, 0x01	; 1
 9f2:	92 95       	swap	r25
 9f4:	99 0f       	add	r25, r25
 9f6:	90 7e       	andi	r25, 0xE0	; 224
 9f8:	92 2b       	or	r25, r18
 9fa:	95 b9       	out	0x05, r25	; 5
	/*BIT[1]*/
	LCD_D5_PORT &=~(1U<<LCD_D5_PIN);
 9fc:	98 b1       	in	r25, 0x08	; 8
 9fe:	9e 7f       	andi	r25, 0xFE	; 254
 a00:	98 b9       	out	0x08, r25	; 8
	LCD_D5_PORT |= (((val>>1)&0x01U)<<LCD_D5_PIN);
 a02:	98 b1       	in	r25, 0x08	; 8
 a04:	81 fb       	bst	r24, 1
 a06:	22 27       	eor	r18, r18
 a08:	20 f9       	bld	r18, 0
 a0a:	92 2b       	or	r25, r18
 a0c:	98 b9       	out	0x08, r25	; 8
	/*BIT[2]*/
	LCD_D6_PORT &=~(1U<<LCD_D6_PIN);
 a0e:	98 b1       	in	r25, 0x08	; 8
 a10:	9d 7f       	andi	r25, 0xFD	; 253
 a12:	98 b9       	out	0x08, r25	; 8
	LCD_D6_PORT |= (((val>>2)&0x01U)<<LCD_D6_PIN);
 a14:	28 b1       	in	r18, 0x08	; 8
 a16:	82 fb       	bst	r24, 2
 a18:	99 27       	eor	r25, r25
 a1a:	90 f9       	bld	r25, 0
 a1c:	99 0f       	add	r25, r25
 a1e:	92 2b       	or	r25, r18
 a20:	98 b9       	out	0x08, r25	; 8
	/*BIT[3]*/
	LCD_D7_PORT &=~(1U<<LCD_D7_PIN);
 a22:	98 b1       	in	r25, 0x08	; 8
 a24:	97 7f       	andi	r25, 0xF7	; 247
 a26:	98 b9       	out	0x08, r25	; 8
	LCD_D7_PORT |= (((val>>3)&0x01U)<<LCD_D7_PIN);
 a28:	98 b1       	in	r25, 0x08	; 8
 a2a:	88 70       	andi	r24, 0x08	; 8
 a2c:	89 2b       	or	r24, r25
 a2e:	88 b9       	out	0x08, r24	; 8
 a30:	08 95       	ret

Disassembly of section .text.LCD_pulse_EN:

00000c0c <LCD_pulse_EN>:

/**
  * @genera un pulso para enviar los datos                                                                 
  */
static void LCD_pulse_EN(void){
	LCD_EN_HI(); // Habilita pin EN ON
 c0c:	85 b1       	in	r24, 0x05	; 5
 c0e:	84 60       	ori	r24, 0x04	; 4
 c10:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c12:	8f ec       	ldi	r24, 0xCF	; 207
 c14:	97 e0       	ldi	r25, 0x07	; 7
 c16:	01 97       	sbiw	r24, 0x01	; 1
 c18:	f1 f7       	brne	.-4      	; 0xc16 <LCD_pulse_EN+0xa>
 c1a:	00 c0       	rjmp	.+0      	; 0xc1c <LCD_pulse_EN+0x10>
 c1c:	00 00       	nop
	lcd_delay_us(500);
	LCD_EN_LO(); // Habilita pin EN Off
 c1e:	85 b1       	in	r24, 0x05	; 5
 c20:	8b 7f       	andi	r24, 0xFB	; 251
 c22:	85 b9       	out	0x05, r24	; 5
 c24:	08 95       	ret

Disassembly of section .text.LCD_Write_Byte:

00000bec <LCD_Write_Byte>:
	
}
/**
 * @brief ESTA FUNCION ENVIA UN BYTE DE DATOS A LA LCD
 */
void LCD_Write_Byte(unsigned char val){
 bec:	cf 93       	push	r28
 bee:	c8 2f       	mov	r28, r24
	LCD_Out_Data4((val>>4)&0x0F);
 bf0:	82 95       	swap	r24
 bf2:	8f 70       	andi	r24, 0x0F	; 15
 bf4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_Out_Data4>
	LCD_pulse_EN();
 bf8:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
	LCD_Out_Data4(val&0x0F);
 bfc:	8c 2f       	mov	r24, r28
 bfe:	8f 70       	andi	r24, 0x0F	; 15
 c00:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_Out_Data4>
	LCD_pulse_EN();
 c04:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
}
 c08:	cf 91       	pop	r28
 c0a:	08 95       	ret

Disassembly of section .text.LCD_Write_Cmd:

00000c40 <LCD_Write_Cmd>:
/**
 * @brief ESTA FUNCION ENVIA UN COMANDO A LA LCD
 */
void LCD_Write_Cmd(unsigned char val){
	LCD_RS_LO();         // pin RS = 0 (Seleccion comando)
 c40:	95 b1       	in	r25, 0x05	; 5
 c42:	9d 7f       	andi	r25, 0xFD	; 253
 c44:	95 b9       	out	0x05, r25	; 5
	LCD_Write_Byte(val);
 c46:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_Write_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c4a:	8f ed       	ldi	r24, 0xDF	; 223
 c4c:	9e e2       	ldi	r25, 0x2E	; 46
 c4e:	01 97       	sbiw	r24, 0x01	; 1
 c50:	f1 f7       	brne	.-4      	; 0xc4e <LCD_Write_Cmd+0xe>
 c52:	00 c0       	rjmp	.+0      	; 0xc54 <LCD_Write_Cmd+0x14>
 c54:	00 00       	nop
 c56:	08 95       	ret

Disassembly of section .text.LCD_printChar:

00000c58 <LCD_printChar>:
}
/**
 * @brief ESTA FUNCION ENVIA UN CARACTER A LA LCD
 */
void LCD_printChar(unsigned char c){
	LCD_RS_HI();        // pin RS = 1 (Seleccion caracteres)
 c58:	95 b1       	in	r25, 0x05	; 5
 c5a:	92 60       	ori	r25, 0x02	; 2
 c5c:	95 b9       	out	0x05, r25	; 5
	LCD_Write_Byte(c);
 c5e:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_Write_Byte>
 c62:	08 95       	ret

Disassembly of section .text.LCD_Init:

0000071e <LCD_Init>:
 */

/************************************************************************/
/*						USER FUNCTION                                   */
/************************************************************************/
void LCD_Init(void){
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	cf 93       	push	r28
	uint8_t i;
	char const *p;
	LCD_InitPinout();
 726:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_InitPinout>
 72a:	2f e7       	ldi	r18, 0x7F	; 127
 72c:	82 e3       	ldi	r24, 0x32	; 50
 72e:	92 e0       	ldi	r25, 0x02	; 2
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <LCD_Init+0x12>
 738:	00 c0       	rjmp	.+0      	; 0x73a <LCD_Init+0x1c>
 73a:	00 00       	nop
	//se espera por 45ms
	lcd_delay_ms(45);

	LCD_D4_HI();
 73c:	85 b1       	in	r24, 0x05	; 5
 73e:	80 62       	ori	r24, 0x20	; 32
 740:	85 b9       	out	0x05, r24	; 5
	LCD_D5_HI();
 742:	88 b1       	in	r24, 0x08	; 8
 744:	81 60       	ori	r24, 0x01	; 1
 746:	88 b9       	out	0x08, r24	; 8
	LCD_D6_LO();
 748:	88 b1       	in	r24, 0x08	; 8
 74a:	8d 7f       	andi	r24, 0xFD	; 253
 74c:	88 b9       	out	0x08, r24	; 8
	LCD_D7_LO();
 74e:	88 b1       	in	r24, 0x08	; 8
 750:	87 7f       	andi	r24, 0xF7	; 247
 752:	88 b9       	out	0x08, r24	; 8
 754:	8f e5       	ldi	r24, 0x5F	; 95
 756:	9a ee       	ldi	r25, 0xEA	; 234
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_Init+0x3a>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_Init+0x40>
 75e:	00 00       	nop
	lcd_delay_ms(15);  // Delay de 15 ms

	LCD_D4_HI();
 760:	85 b1       	in	r24, 0x05	; 5
 762:	80 62       	ori	r24, 0x20	; 32
 764:	85 b9       	out	0x05, r24	; 5
	LCD_D5_HI();
 766:	88 b1       	in	r24, 0x08	; 8
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	88 b9       	out	0x08, r24	; 8
	LCD_D6_LO();
 76c:	88 b1       	in	r24, 0x08	; 8
 76e:	8d 7f       	andi	r24, 0xFD	; 253
 770:	88 b9       	out	0x08, r24	; 8
	LCD_D7_LO();
 772:	88 b1       	in	r24, 0x08	; 8
 774:	87 7f       	andi	r24, 0xF7	; 247
 776:	88 b9       	out	0x08, r24	; 8
	LCD_pulse_EN();
 778:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
 77c:	8f eb       	ldi	r24, 0xBF	; 191
 77e:	9d e5       	ldi	r25, 0x5D	; 93
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	f1 f7       	brne	.-4      	; 0x780 <LCD_Init+0x62>
 784:	00 c0       	rjmp	.+0      	; 0x786 <LCD_Init+0x68>
 786:	00 00       	nop
	lcd_delay_ms(6); // Delay de 4.1 ms

	LCD_D4_HI();
 788:	85 b1       	in	r24, 0x05	; 5
 78a:	80 62       	ori	r24, 0x20	; 32
 78c:	85 b9       	out	0x05, r24	; 5
	LCD_D5_HI();
 78e:	88 b1       	in	r24, 0x08	; 8
 790:	81 60       	ori	r24, 0x01	; 1
 792:	88 b9       	out	0x08, r24	; 8
	LCD_D6_LO();
 794:	88 b1       	in	r24, 0x08	; 8
 796:	8d 7f       	andi	r24, 0xFD	; 253
 798:	88 b9       	out	0x08, r24	; 8
	LCD_D7_LO();
 79a:	88 b1       	in	r24, 0x08	; 8
 79c:	87 7f       	andi	r24, 0xF7	; 247
 79e:	88 b9       	out	0x08, r24	; 8
	LCD_pulse_EN();
 7a0:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
 7a4:	8f e9       	ldi	r24, 0x9F	; 159
 7a6:	9f e0       	ldi	r25, 0x0F	; 15
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_Init+0x8a>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_Init+0x90>
 7ae:	00 00       	nop
	lcd_delay_ms(1); // Delay de 100 us

	LCD_D4_HI();
 7b0:	85 b1       	in	r24, 0x05	; 5
 7b2:	80 62       	ori	r24, 0x20	; 32
 7b4:	85 b9       	out	0x05, r24	; 5
	LCD_D5_HI();
 7b6:	88 b1       	in	r24, 0x08	; 8
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	88 b9       	out	0x08, r24	; 8
	LCD_D6_LO();
 7bc:	88 b1       	in	r24, 0x08	; 8
 7be:	8d 7f       	andi	r24, 0xFD	; 253
 7c0:	88 b9       	out	0x08, r24	; 8
	LCD_D7_LO();
 7c2:	88 b1       	in	r24, 0x08	; 8
 7c4:	87 7f       	andi	r24, 0xF7	; 247
 7c6:	88 b9       	out	0x08, r24	; 8
	LCD_pulse_EN();
 7c8:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
 7cc:	8f e9       	ldi	r24, 0x9F	; 159
 7ce:	9f e0       	ldi	r25, 0x0F	; 15
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCD_Init+0xb2>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <LCD_Init+0xb8>
 7d6:	00 00       	nop
	lcd_delay_ms(1);
	LCD_D4_LO();
 7d8:	85 b1       	in	r24, 0x05	; 5
 7da:	8f 7d       	andi	r24, 0xDF	; 223
 7dc:	85 b9       	out	0x05, r24	; 5
	LCD_D5_HI();
 7de:	88 b1       	in	r24, 0x08	; 8
 7e0:	81 60       	ori	r24, 0x01	; 1
 7e2:	88 b9       	out	0x08, r24	; 8
	LCD_D6_LO();
 7e4:	88 b1       	in	r24, 0x08	; 8
 7e6:	8d 7f       	andi	r24, 0xFD	; 253
 7e8:	88 b9       	out	0x08, r24	; 8
	LCD_D7_LO();
 7ea:	88 b1       	in	r24, 0x08	; 8
 7ec:	87 7f       	andi	r24, 0xF7	; 247
 7ee:	88 b9       	out	0x08, r24	; 8
	LCD_pulse_EN();
 7f0:	0e 94 06 06 	call	0xc0c	; 0xc0c <LCD_pulse_EN>
 7f4:	8f e9       	ldi	r24, 0x9F	; 159
 7f6:	9f e0       	ldi	r25, 0x0F	; 15
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_Init+0xda>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_Init+0xe0>
 7fe:	00 00       	nop
	lcd_delay_ms(1);
	LCD_Write_Cmd(0x28); // Establecemos LCD como (Datos 4-Bit, N_lineas=2, Font=0 5X7)
 800:	88 e2       	ldi	r24, 0x28	; 40
 802:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x0C); // Enciende el LCD sin cursor.
 806:	8c e0       	ldi	r24, 0x0C	; 12
 808:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x06); // Inicializa cursor
 80c:	86 e0       	ldi	r24, 0x06	; 6
 80e:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>

	  /* Cargamos el caracter definidos por usuario en la CGRRAM */
	LCD_Write_Cmd(0x40); /* Establece la direccion CGRAM desde 0 */
 812:	80 e4       	ldi	r24, 0x40	; 64
 814:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 818:	0f 2e       	mov	r0, r31
 81a:	f5 e2       	ldi	r31, 0x25	; 37
 81c:	cf 2e       	mov	r12, r31
 81e:	f1 e0       	ldi	r31, 0x01	; 1
 820:	df 2e       	mov	r13, r31
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	ef 2e       	mov	r14, r31
 826:	f0 2d       	mov	r31, r0
	for (i = 0; i < sizeof(UserFont); i++, p++)
 828:	c0 e0       	ldi	r28, 0x00	; 0
 82a:	0b c0       	rjmp	.+22     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	LCD_printChar(*p);
 82c:	f6 01       	movw	r30, r12
 82e:	84 91       	lpm	r24, Z
 830:	e7 fc       	sbrc	r14, 7
 832:	80 81       	ld	r24, Z
 834:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_printChar>
	LCD_Write_Cmd(0x06); // Inicializa cursor

	  /* Cargamos el caracter definidos por usuario en la CGRRAM */
	LCD_Write_Cmd(0x40); /* Establece la direccion CGRAM desde 0 */
	p = &UserFont[0][0];
	for (i = 0; i < sizeof(UserFont); i++, p++)
 838:	cf 5f       	subi	r28, 0xFF	; 255
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	c2 1a       	sub	r12, r18
 83e:	d2 0a       	sbc	r13, r18
 840:	e2 0a       	sbc	r14, r18
 842:	c0 34       	cpi	r28, 0x40	; 64
 844:	98 f3       	brcs	.-26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	LCD_printChar(*p);
	LCD_Write_Cmd(0x80);
 846:	80 e8       	ldi	r24, 0x80	; 128
 848:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
}
 84c:	cf 91       	pop	r28
 84e:	ef 90       	pop	r14
 850:	df 90       	pop	r13
 852:	cf 90       	pop	r12
 854:	08 95       	ret

Disassembly of section .text.LCD_Set_Cursor:

00000bc4 <LCD_Set_Cursor>:
/**
 * @brief ESTABLECE LA POSICION DEL CURSOR
 */
void LCD_Set_Cursor(uint8_t x, uint8_t y){
	uint8_t addr = 0;
	switch(x){
 bc4:	81 30       	cpi	r24, 0x01	; 1
 bc6:	39 f0       	breq	.+14     	; 0xbd6 <LCD_Set_Cursor+0x12>
 bc8:	60 f0       	brcs	.+24     	; 0xbe2 <LCD_Set_Cursor+0x1e>
 bca:	82 30       	cpi	r24, 0x02	; 2
 bcc:	31 f0       	breq	.+12     	; 0xbda <LCD_Set_Cursor+0x16>
 bce:	83 30       	cpi	r24, 0x03	; 3
 bd0:	31 f0       	breq	.+12     	; 0xbde <LCD_Set_Cursor+0x1a>
}
/**
 * @brief ESTABLECE LA POSICION DEL CURSOR
 */
void LCD_Set_Cursor(uint8_t x, uint8_t y){
	uint8_t addr = 0;
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <LCD_Set_Cursor+0x20>
	switch(x){
		case 0: addr = 0x80; break; //Starting address of 1st line
    case 1: addr = 0xC0; break; //Starting address of 2nd line
 bd6:	80 ec       	ldi	r24, 0xC0	; 192
 bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <LCD_Set_Cursor+0x20>
    case 2: addr = 0x94; break; //Starting address of 3rd line
 bda:	84 e9       	ldi	r24, 0x94	; 148
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <LCD_Set_Cursor+0x20>
    case 3: addr = 0xD4; break; //Starting address of 4th line
 bde:	84 ed       	ldi	r24, 0xD4	; 212
 be0:	01 c0       	rjmp	.+2      	; 0xbe4 <LCD_Set_Cursor+0x20>
 * @brief ESTABLECE LA POSICION DEL CURSOR
 */
void LCD_Set_Cursor(uint8_t x, uint8_t y){
	uint8_t addr = 0;
	switch(x){
		case 0: addr = 0x80; break; //Starting address of 1st line
 be2:	80 e8       	ldi	r24, 0x80	; 128
    case 2: addr = 0x94; break; //Starting address of 3rd line
    case 3: addr = 0xD4; break; //Starting address of 4th line
    default: ; 
	}
	addr += y;
	LCD_Write_Cmd(addr);
 be4:	86 0f       	add	r24, r22
 be6:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
 bea:	08 95       	ret

Disassembly of section .text.LCD_printStr:

00000c26 <LCD_printStr>:
	return;
}
/**
 * @brief ENVIA UNA CADENA A LA PANTALLA
 */
void LCD_printStr(char *buffer) {
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	ec 01       	movw	r28, r24
    while (*buffer) // Write data to LCD up to null
 c2c:	03 c0       	rjmp	.+6      	; 0xc34 <LCD_printStr+0xe>
    {
    	LCD_printChar(*buffer); // Write character to LCD
 c2e:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_printChar>
        buffer++; // Increment buffer
 c32:	21 96       	adiw	r28, 0x01	; 1
}
/**
 * @brief ENVIA UNA CADENA A LA PANTALLA
 */
void LCD_printStr(char *buffer) {
    while (*buffer) // Write data to LCD up to null
 c34:	88 81       	ld	r24, Y
 c36:	81 11       	cpse	r24, r1
 c38:	fa cf       	rjmp	.-12     	; 0xc2e <LCD_printStr+0x8>
    {
    	LCD_printChar(*buffer); // Write character to LCD
        buffer++; // Increment buffer
    }
    return;
}
 c3a:	df 91       	pop	r29
 c3c:	cf 91       	pop	r28
 c3e:	08 95       	ret

Disassembly of section .text.LCD_printInt:

0000098a <LCD_printInt>:
/**
 * /@briefENVIA UN NUMERO A LA LCD
 */
void LCD_printInt(int number) {
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	cf 93       	push	r28
 990:	df 93       	push	r29
 992:	cd b7       	in	r28, 0x3d	; 61
 994:	de b7       	in	r29, 0x3e	; 62
 996:	60 97       	sbiw	r28, 0x10	; 16
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	f8 94       	cli
 99c:	de bf       	out	0x3e, r29	; 62
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	cd bf       	out	0x3d, r28	; 61
    char numStr[16]; //para convertir en cadena
    sprintf(numStr, "%d", number); //funcion para unir en cadena de caracteries
 9a2:	9f 93       	push	r25
 9a4:	8f 93       	push	r24
 9a6:	85 e6       	ldi	r24, 0x65	; 101
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	a0 e0       	ldi	r26, 0x00	; 0
 9ac:	af 93       	push	r26
 9ae:	9f 93       	push	r25
 9b0:	8f 93       	push	r24
 9b2:	8e 01       	movw	r16, r28
 9b4:	0f 5f       	subi	r16, 0xFF	; 255
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	1f 93       	push	r17
 9ba:	0f 93       	push	r16
 9bc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <sprintf>
    LCD_printStr(numStr);
 9c0:	c8 01       	movw	r24, r16
 9c2:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
}
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	f8 94       	cli
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	cd bf       	out	0x3d, r28	; 61
 9d0:	60 96       	adiw	r28, 0x10	; 16
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	f8 94       	cli
 9d6:	de bf       	out	0x3e, r29	; 62
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	cd bf       	out	0x3d, r28	; 61
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	08 95       	ret

Disassembly of section .text.main:

000005b6 <main>:
uint8_t count = 1;

int main(void)
{
	//PD3-> ENTRADA CON PULL UP
	DDRD &=~ (1U<<3);
 5b6:	8a b1       	in	r24, 0x0a	; 10
 5b8:	87 7f       	andi	r24, 0xF7	; 247
 5ba:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1U<<3;		//PULL UP
 5bc:	8b b1       	in	r24, 0x0b	; 11
 5be:	88 60       	ori	r24, 0x08	; 8
 5c0:	8b b9       	out	0x0b, r24	; 11
	
	/*INT0 INIT*/
	cli();				//clear interrupt
 5c2:	f8 94       	cli
	 // Configure PD2 as an input using the Data Direction Register D (DDRD)
	 DDRD &= ~(1U<<2);
 5c4:	8a b1       	in	r24, 0x0a	; 10
 5c6:	8b 7f       	andi	r24, 0xFB	; 251
 5c8:	8a b9       	out	0x0a, r24	; 10
	 // Enable the pull-up resistor on PD2 using the Port D
	 PORTD |= _BV(PORTD2);
 5ca:	8b b1       	in	r24, 0x0b	; 11
 5cc:	84 60       	ori	r24, 0x04	; 4
 5ce:	8b b9       	out	0x0b, r24	; 11
	 EICRA |= 1U<<ISC01;			//falling edge sensitivity (INT0)
 5d0:	e9 e6       	ldi	r30, 0x69	; 105
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	80 83       	st	Z, r24
	 EIMSK |= 1U<<INT0;				//mask INT0
 5da:	8d b3       	in	r24, 0x1d	; 29
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	8d bb       	out	0x1d, r24	; 29
	 sei();							//set enable interrupt
 5e0:	78 94       	sei
	 //PB3 -> SALIDA
	 DDRB |= 1U<<3;
 5e2:	84 b1       	in	r24, 0x04	; 4
 5e4:	88 60       	ori	r24, 0x08	; 8
 5e6:	84 b9       	out	0x04, r24	; 4
	 //PC2 -> SALIDA
	 DDRC |= 1U<<2;
 5e8:	87 b1       	in	r24, 0x07	; 7
 5ea:	84 60       	ori	r24, 0x04	; 4
 5ec:	87 b9       	out	0x07, r24	; 7
	/*LCD Init*/
	LCD_Init();
 5ee:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_Init>
	LCD_clear();
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	sprintf(txt,"**QUINO B. JEFFRY**");
 5f8:	24 e1       	ldi	r18, 0x14	; 20
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	48 ec       	ldi	r20, 0xC8	; 200
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 b3 05 	call	0xb66	; 0xb66 <memcpy>
	LCD_printStr(txt);
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
	LCD_Set_Cursor(1, 0);
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Set_Cursor>
	sprintf(txt,"-------->AVR<--------");
 61a:	26 e1       	ldi	r18, 0x16	; 22
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	4c ed       	ldi	r20, 0xDC	; 220
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	0e 94 b3 05 	call	0xb66	; 0xb66 <memcpy>
	LCD_printStr(txt);
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
	LCD_Set_Cursor(2, 0);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Set_Cursor>
	sprintf(txt,"ENERO - ");
 63c:	29 e0       	ldi	r18, 0x09	; 9
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	42 ef       	ldi	r20, 0xF2	; 242
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 b3 05 	call	0xb66	; 0xb66 <memcpy>
	LCD_printStr(txt);
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
	LCD_printInt(2022);
 656:	86 ee       	ldi	r24, 0xE6	; 230
 658:	97 e0       	ldi	r25, 0x07	; 7
 65a:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_printInt>
	LCD_Set_Cursor(3, 0);
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Set_Cursor>
	LCD_cursor_on();
 666:	8e e0       	ldi	r24, 0x0E	; 14
 668:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	LCD_cursor_blink();
 66c:	8f e0       	ldi	r24, 0x0F	; 15
 66e:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_Write_Cmd>
	sprintf(txt,"ATMEGA328P");
 672:	2b e0       	ldi	r18, 0x0B	; 11
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	4b ef       	ldi	r20, 0xFB	; 251
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 b3 05 	call	0xb66	; 0xb66 <memcpy>
	LCD_printStr(txt);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
    while(1)
    {
        //TODO:: Please write your application code 
		if(stateIt){
 68c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <stateIt>
 690:	88 23       	and	r24, r24
 692:	99 f1       	breq	.+102    	; 0x6fa <main+0x144>
			stateIt = 0;
 694:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <stateIt>
			LCD_Set_Cursor(3, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Set_Cursor>
			sprintf(txt,"                     ");
 6a0:	26 e1       	ldi	r18, 0x16	; 22
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	46 e0       	ldi	r20, 0x06	; 6
 6a6:	51 e0       	ldi	r21, 0x01	; 1
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 b3 05 	call	0xb66	; 0xb66 <memcpy>
			LCD_printStr(txt);
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
			LCD_Set_Cursor(3, 0);
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Set_Cursor>
			sprintf(txt,"INT0->%d",count);
 6c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 6c6:	1f 92       	push	r1
 6c8:	8f 93       	push	r24
 6ca:	8c e1       	ldi	r24, 0x1C	; 28
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	a0 e0       	ldi	r26, 0x00	; 0
 6d0:	af 93       	push	r26
 6d2:	9f 93       	push	r25
 6d4:	8f 93       	push	r24
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	9f 93       	push	r25
 6dc:	8f 93       	push	r24
 6de:	0e 94 3e 05 	call	0xa7c	; 0xa7c <sprintf>
			LCD_printStr(txt);
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 13 06 	call	0xc26	; 0xc26 <LCD_printStr>
 6ea:	8d b7       	in	r24, 0x3d	; 61
 6ec:	9e b7       	in	r25, 0x3e	; 62
 6ee:	07 96       	adiw	r24, 0x07	; 7
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	9e bf       	out	0x3e, r25	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	8d bf       	out	0x3d, r24	; 61
		}
		/*EFECTO LED*/
		if(!(PIND & 1U<<3)){
 6fa:	4b 99       	sbic	0x09, 3	; 9
 6fc:	c7 cf       	rjmp	.-114    	; 0x68c <main+0xd6>
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	29 e6       	ldi	r18, 0x69	; 105
 702:	88 e1       	ldi	r24, 0x18	; 24
 704:	91 50       	subi	r25, 0x01	; 1
 706:	20 40       	sbci	r18, 0x00	; 0
 708:	80 40       	sbci	r24, 0x00	; 0
 70a:	e1 f7       	brne	.-8      	; 0x704 <main+0x14e>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x158>
 70e:	00 00       	nop
 710:	03 c0       	rjmp	.+6      	; 0x718 <main+0x162>
			_delay_ms(500);
			while(!(PIND & 1U<<3))  //hasta que se suelte el pulsador
			PINC |= 1u<<2;
 712:	86 b1       	in	r24, 0x06	; 6
 714:	84 60       	ori	r24, 0x04	; 4
 716:	86 b9       	out	0x06, r24	; 6
			LCD_printStr(txt);
		}
		/*EFECTO LED*/
		if(!(PIND & 1U<<3)){
			_delay_ms(500);
			while(!(PIND & 1U<<3))  //hasta que se suelte el pulsador
 718:	4b 9b       	sbis	0x09, 3	; 9
 71a:	fb cf       	rjmp	.-10     	; 0x712 <main+0x15c>
 71c:	b7 cf       	rjmp	.-146    	; 0x68c <main+0xd6>

Disassembly of section .text.__vector_1:

00000b98 <__vector_1>:
}

/************************************************************************/
/*		Interrupt service routine			                            */
/************************************************************************/
ISR(INT0_vect){
 b98:	1f 92       	push	r1
 b9a:	0f 92       	push	r0
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	0f 92       	push	r0
 ba0:	11 24       	eor	r1, r1
 ba2:	8f 93       	push	r24
	PINB = 1U<<3;
 ba4:	88 e0       	ldi	r24, 0x08	; 8
 ba6:	83 b9       	out	0x03, r24	; 3
	stateIt = 1;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
 baa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <stateIt>
	count = count +1;
 bae:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 bb2:	8f 5f       	subi	r24, 0xFF	; 255
 bb4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <count>
}
 bb8:	8f 91       	pop	r24
 bba:	0f 90       	pop	r0
 bbc:	0f be       	out	0x3f, r0	; 63
 bbe:	0f 90       	pop	r0
 bc0:	1f 90       	pop	r1
 bc2:	18 95       	reti

Disassembly of section .text.avrlibc:

00000b66 <memcpy>:
 b66:	cf 92       	push	r12
 b68:	df 92       	push	r13
 b6a:	ef 92       	push	r14
 b6c:	dc 01       	movw	r26, r24
 b6e:	6a 01       	movw	r12, r20
 b70:	e6 2e       	mov	r14, r22
 b72:	28 0f       	add	r18, r24
 b74:	39 1f       	adc	r19, r25
 b76:	a2 17       	cp	r26, r18
 b78:	b3 07       	cpc	r27, r19
 b7a:	51 f0       	breq	.+20     	; 0xb90 <memcpy+0x2a>
 b7c:	f6 01       	movw	r30, r12
 b7e:	44 91       	lpm	r20, Z
 b80:	e7 fc       	sbrc	r14, 7
 b82:	40 81       	ld	r20, Z
 b84:	4d 93       	st	X+, r20
 b86:	4f ef       	ldi	r20, 0xFF	; 255
 b88:	c4 1a       	sub	r12, r20
 b8a:	d4 0a       	sbc	r13, r20
 b8c:	e4 0a       	sbc	r14, r20
 b8e:	f3 cf       	rjmp	.-26     	; 0xb76 <memcpy+0x10>
 b90:	ef 90       	pop	r14
 b92:	df 90       	pop	r13
 b94:	cf 90       	pop	r12
 b96:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a7c <sprintf>:
 a7c:	af e0       	ldi	r26, 0x0F	; 15
 a7e:	b0 e0       	ldi	r27, 0x00	; 0
 a80:	e4 e4       	ldi	r30, 0x44	; 68
 a82:	f5 e0       	ldi	r31, 0x05	; 5
 a84:	0c 94 6f 05 	jmp	0xade	; 0xade <__prologue_saves__+0x1c>
 a88:	0e 89       	ldd	r16, Y+22	; 0x16
 a8a:	1f 89       	ldd	r17, Y+23	; 0x17
 a8c:	86 e0       	ldi	r24, 0x06	; 6
 a8e:	8d 83       	std	Y+5, r24	; 0x05
 a90:	1a 83       	std	Y+2, r17	; 0x02
 a92:	09 83       	std	Y+1, r16	; 0x01
 a94:	8f ef       	ldi	r24, 0xFF	; 255
 a96:	9f e7       	ldi	r25, 0x7F	; 127
 a98:	9f 83       	std	Y+7, r25	; 0x07
 a9a:	8e 83       	std	Y+6, r24	; 0x06
 a9c:	9e 01       	movw	r18, r28
 a9e:	25 5e       	subi	r18, 0xE5	; 229
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	48 8d       	ldd	r20, Y+24	; 0x18
 aa4:	59 8d       	ldd	r21, Y+25	; 0x19
 aa6:	6a 8d       	ldd	r22, Y+26	; 0x1a
 aa8:	ce 01       	movw	r24, r28
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	0e 94 b7 00 	call	0x16e	; 0x16e <vfprintf>
 ab0:	e8 85       	ldd	r30, Y+8	; 0x08
 ab2:	f9 85       	ldd	r31, Y+9	; 0x09
 ab4:	e0 0f       	add	r30, r16
 ab6:	f1 1f       	adc	r31, r17
 ab8:	10 82       	st	Z, r1
 aba:	2f 96       	adiw	r28, 0x0f	; 15
 abc:	e4 e0       	ldi	r30, 0x04	; 4
 abe:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000016e <vfprintf>:
 16e:	2f 92       	push	r2
 170:	3f 92       	push	r3
 172:	4f 92       	push	r4
 174:	6f 92       	push	r6
 176:	7f 92       	push	r7
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	62 97       	sbiw	r28, 0x12	; 18
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	6c 01       	movw	r12, r24
 1a2:	3a 01       	movw	r6, r20
 1a4:	86 2e       	mov	r8, r22
 1a6:	79 01       	movw	r14, r18
 1a8:	fc 01       	movw	r30, r24
 1aa:	10 86       	std	Z+8, r1	; 0x08
 1ac:	17 82       	std	Z+7, r1	; 0x07
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	81 ff       	sbrs	r24, 1
 1b2:	e7 c1       	rjmp	.+974    	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 1b4:	9e 01       	movw	r18, r28
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	3d 87       	std	Y+13, r19	; 0x0d
 1bc:	2c 87       	std	Y+12, r18	; 0x0c
 1be:	c9 01       	movw	r24, r18
 1c0:	a0 e8       	ldi	r26, 0x80	; 128
 1c2:	88 8b       	std	Y+16, r24	; 0x10
 1c4:	99 8b       	std	Y+17, r25	; 0x11
 1c6:	aa 8b       	std	Y+18, r26	; 0x12
 1c8:	9f e3       	ldi	r25, 0x3F	; 63
 1ca:	99 2e       	mov	r9, r25
 1cc:	f3 01       	movw	r30, r6
 1ce:	84 91       	lpm	r24, Z
 1d0:	87 fc       	sbrc	r8, 7
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	09 f4       	brne	.+2      	; 0x1da <vfprintf+0x6c>
 1d8:	d0 c1       	rjmp	.+928    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 1da:	48 2d       	mov	r20, r8
 1dc:	93 01       	movw	r18, r6
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	4f 4f       	sbci	r20, 0xFF	; 255
 1e4:	85 32       	cpi	r24, 0x25	; 37
 1e6:	19 f0       	breq	.+6      	; 0x1ee <vfprintf+0x80>
 1e8:	39 01       	movw	r6, r18
 1ea:	84 2e       	mov	r8, r20
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <vfprintf+0x94>
 1ee:	f9 01       	movw	r30, r18
 1f0:	84 91       	lpm	r24, Z
 1f2:	47 fd       	sbrc	r20, 7
 1f4:	80 81       	ld	r24, Z
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	69 0e       	add	r6, r25
 1fa:	71 1c       	adc	r7, r1
 1fc:	81 1c       	adc	r8, r1
 1fe:	85 32       	cpi	r24, 0x25	; 37
 200:	29 f4       	brne	.+10     	; 0x20c <vfprintf+0x9e>
 202:	b6 01       	movw	r22, r12
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 20a:	e0 cf       	rjmp	.-64     	; 0x1cc <vfprintf+0x5e>
 20c:	b1 2c       	mov	r11, r1
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	10 32       	cpi	r17, 0x20	; 32
 214:	a0 f4       	brcc	.+40     	; 0x23e <vfprintf+0xd0>
 216:	8b 32       	cpi	r24, 0x2B	; 43
 218:	69 f0       	breq	.+26     	; 0x234 <vfprintf+0xc6>
 21a:	30 f4       	brcc	.+12     	; 0x228 <vfprintf+0xba>
 21c:	80 32       	cpi	r24, 0x20	; 32
 21e:	59 f0       	breq	.+22     	; 0x236 <vfprintf+0xc8>
 220:	83 32       	cpi	r24, 0x23	; 35
 222:	69 f4       	brne	.+26     	; 0x23e <vfprintf+0xd0>
 224:	10 61       	ori	r17, 0x10	; 16
 226:	2c c0       	rjmp	.+88     	; 0x280 <vfprintf+0x112>
 228:	8d 32       	cpi	r24, 0x2D	; 45
 22a:	39 f0       	breq	.+14     	; 0x23a <vfprintf+0xcc>
 22c:	80 33       	cpi	r24, 0x30	; 48
 22e:	39 f4       	brne	.+14     	; 0x23e <vfprintf+0xd0>
 230:	11 60       	ori	r17, 0x01	; 1
 232:	26 c0       	rjmp	.+76     	; 0x280 <vfprintf+0x112>
 234:	12 60       	ori	r17, 0x02	; 2
 236:	14 60       	ori	r17, 0x04	; 4
 238:	23 c0       	rjmp	.+70     	; 0x280 <vfprintf+0x112>
 23a:	18 60       	ori	r17, 0x08	; 8
 23c:	21 c0       	rjmp	.+66     	; 0x280 <vfprintf+0x112>
 23e:	17 fd       	sbrc	r17, 7
 240:	29 c0       	rjmp	.+82     	; 0x294 <vfprintf+0x126>
 242:	90 ed       	ldi	r25, 0xD0	; 208
 244:	98 0f       	add	r25, r24
 246:	9a 30       	cpi	r25, 0x0A	; 10
 248:	78 f4       	brcc	.+30     	; 0x268 <vfprintf+0xfa>
 24a:	16 ff       	sbrs	r17, 6
 24c:	06 c0       	rjmp	.+12     	; 0x25a <vfprintf+0xec>
 24e:	aa e0       	ldi	r26, 0x0A	; 10
 250:	ba 9e       	mul	r11, r26
 252:	90 0d       	add	r25, r0
 254:	11 24       	eor	r1, r1
 256:	b9 2e       	mov	r11, r25
 258:	13 c0       	rjmp	.+38     	; 0x280 <vfprintf+0x112>
 25a:	ea e0       	ldi	r30, 0x0A	; 10
 25c:	0e 9f       	mul	r16, r30
 25e:	90 0d       	add	r25, r0
 260:	11 24       	eor	r1, r1
 262:	09 2f       	mov	r16, r25
 264:	10 62       	ori	r17, 0x20	; 32
 266:	0c c0       	rjmp	.+24     	; 0x280 <vfprintf+0x112>
 268:	8e 32       	cpi	r24, 0x2E	; 46
 26a:	21 f4       	brne	.+8      	; 0x274 <vfprintf+0x106>
 26c:	16 fd       	sbrc	r17, 6
 26e:	85 c1       	rjmp	.+778    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 270:	10 64       	ori	r17, 0x40	; 64
 272:	06 c0       	rjmp	.+12     	; 0x280 <vfprintf+0x112>
 274:	8c 36       	cpi	r24, 0x6C	; 108
 276:	11 f4       	brne	.+4      	; 0x27c <vfprintf+0x10e>
 278:	10 68       	ori	r17, 0x80	; 128
 27a:	02 c0       	rjmp	.+4      	; 0x280 <vfprintf+0x112>
 27c:	88 36       	cpi	r24, 0x68	; 104
 27e:	51 f4       	brne	.+20     	; 0x294 <vfprintf+0x126>
 280:	f3 01       	movw	r30, r6
 282:	84 91       	lpm	r24, Z
 284:	87 fc       	sbrc	r8, 7
 286:	80 81       	ld	r24, Z
 288:	ff ef       	ldi	r31, 0xFF	; 255
 28a:	6f 1a       	sub	r6, r31
 28c:	7f 0a       	sbc	r7, r31
 28e:	8f 0a       	sbc	r8, r31
 290:	81 11       	cpse	r24, r1
 292:	bf cf       	rjmp	.-130    	; 0x212 <vfprintf+0xa4>
 294:	98 2f       	mov	r25, r24
 296:	9f 7d       	andi	r25, 0xDF	; 223
 298:	95 54       	subi	r25, 0x45	; 69
 29a:	93 30       	cpi	r25, 0x03	; 3
 29c:	28 f4       	brcc	.+10     	; 0x2a8 <vfprintf+0x13a>
 29e:	24 e0       	ldi	r18, 0x04	; 4
 2a0:	e2 0e       	add	r14, r18
 2a2:	f1 1c       	adc	r15, r1
 2a4:	99 82       	std	Y+1, r9	; 0x01
 2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <vfprintf+0x158>
 2a8:	83 36       	cpi	r24, 0x63	; 99
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <vfprintf+0x14a>
 2ac:	83 37       	cpi	r24, 0x73	; 115
 2ae:	91 f0       	breq	.+36     	; 0x2d4 <vfprintf+0x166>
 2b0:	83 35       	cpi	r24, 0x53	; 83
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <vfprintf+0x148>
 2b4:	63 c0       	rjmp	.+198    	; 0x37c <vfprintf+0x20e>
 2b6:	27 c0       	rjmp	.+78     	; 0x306 <vfprintf+0x198>
 2b8:	f7 01       	movw	r30, r14
 2ba:	80 81       	ld	r24, Z
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	97 01       	movw	r18, r14
 2c0:	2e 5f       	subi	r18, 0xFE	; 254
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	79 01       	movw	r14, r18
 2c6:	28 88       	ldd	r2, Y+16	; 0x10
 2c8:	39 88       	ldd	r3, Y+17	; 0x11
 2ca:	4a 88       	ldd	r4, Y+18	; 0x12
 2cc:	aa 24       	eor	r10, r10
 2ce:	a3 94       	inc	r10
 2d0:	b1 2c       	mov	r11, r1
 2d2:	17 c0       	rjmp	.+46     	; 0x302 <vfprintf+0x194>
 2d4:	a7 01       	movw	r20, r14
 2d6:	4d 5f       	subi	r20, 0xFD	; 253
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255
 2da:	5f 87       	std	Y+15, r21	; 0x0f
 2dc:	4e 87       	std	Y+14, r20	; 0x0e
 2de:	f7 01       	movw	r30, r14
 2e0:	20 80       	ld	r2, Z
 2e2:	31 80       	ldd	r3, Z+1	; 0x01
 2e4:	42 80       	ldd	r4, Z+2	; 0x02
 2e6:	16 ff       	sbrs	r17, 6
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <vfprintf+0x182>
 2ea:	4b 2d       	mov	r20, r11
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <vfprintf+0x186>
 2f0:	4f ef       	ldi	r20, 0xFF	; 255
 2f2:	5f ef       	ldi	r21, 0xFF	; 255
 2f4:	84 2d       	mov	r24, r4
 2f6:	b1 01       	movw	r22, r2
 2f8:	0e 94 7d 05 	call	0xafa	; 0xafa <strnlen>
 2fc:	5c 01       	movw	r10, r24
 2fe:	ee 84       	ldd	r14, Y+14	; 0x0e
 300:	ff 84       	ldd	r15, Y+15	; 0x0f
 302:	1f 77       	andi	r17, 0x7F	; 127
 304:	18 c0       	rjmp	.+48     	; 0x336 <vfprintf+0x1c8>
 306:	97 01       	movw	r18, r14
 308:	2d 5f       	subi	r18, 0xFD	; 253
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	3f 87       	std	Y+15, r19	; 0x0f
 30e:	2e 87       	std	Y+14, r18	; 0x0e
 310:	f7 01       	movw	r30, r14
 312:	20 80       	ld	r2, Z
 314:	31 80       	ldd	r3, Z+1	; 0x01
 316:	42 80       	ldd	r4, Z+2	; 0x02
 318:	16 ff       	sbrs	r17, 6
 31a:	03 c0       	rjmp	.+6      	; 0x322 <vfprintf+0x1b4>
 31c:	4b 2d       	mov	r20, r11
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <vfprintf+0x1b8>
 322:	4f ef       	ldi	r20, 0xFF	; 255
 324:	5f ef       	ldi	r21, 0xFF	; 255
 326:	84 2d       	mov	r24, r4
 328:	b1 01       	movw	r22, r2
 32a:	0e 94 7d 05 	call	0xafa	; 0xafa <strnlen>
 32e:	5c 01       	movw	r10, r24
 330:	10 68       	ori	r17, 0x80	; 128
 332:	ee 84       	ldd	r14, Y+14	; 0x0e
 334:	ff 84       	ldd	r15, Y+15	; 0x0f
 336:	13 fd       	sbrc	r17, 3
 338:	1d c0       	rjmp	.+58     	; 0x374 <vfprintf+0x206>
 33a:	80 2f       	mov	r24, r16
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	a8 16       	cp	r10, r24
 340:	b9 06       	cpc	r11, r25
 342:	c0 f4       	brcc	.+48     	; 0x374 <vfprintf+0x206>
 344:	b6 01       	movw	r22, r12
 346:	80 e2       	ldi	r24, 0x20	; 32
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 34e:	01 50       	subi	r16, 0x01	; 1
 350:	f4 cf       	rjmp	.-24     	; 0x33a <vfprintf+0x1cc>
 352:	f1 01       	movw	r30, r2
 354:	84 91       	lpm	r24, Z
 356:	47 fc       	sbrc	r4, 7
 358:	80 81       	ld	r24, Z
 35a:	ff ef       	ldi	r31, 0xFF	; 255
 35c:	2f 1a       	sub	r2, r31
 35e:	3f 0a       	sbc	r3, r31
 360:	4f 0a       	sbc	r4, r31
 362:	b6 01       	movw	r22, r12
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 36a:	01 11       	cpse	r16, r1
 36c:	01 50       	subi	r16, 0x01	; 1
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	a2 1a       	sub	r10, r18
 372:	b1 08       	sbc	r11, r1
 374:	a1 14       	cp	r10, r1
 376:	b1 04       	cpc	r11, r1
 378:	61 f7       	brne	.-40     	; 0x352 <vfprintf+0x1e4>
 37a:	f5 c0       	rjmp	.+490    	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 37c:	84 36       	cpi	r24, 0x64	; 100
 37e:	11 f0       	breq	.+4      	; 0x384 <vfprintf+0x216>
 380:	89 36       	cpi	r24, 0x69	; 105
 382:	71 f5       	brne	.+92     	; 0x3e0 <vfprintf+0x272>
 384:	f7 01       	movw	r30, r14
 386:	17 ff       	sbrs	r17, 7
 388:	08 c0       	rjmp	.+16     	; 0x39a <vfprintf+0x22c>
 38a:	60 81       	ld	r22, Z
 38c:	71 81       	ldd	r23, Z+1	; 0x01
 38e:	82 81       	ldd	r24, Z+2	; 0x02
 390:	93 81       	ldd	r25, Z+3	; 0x03
 392:	97 01       	movw	r18, r14
 394:	2c 5f       	subi	r18, 0xFC	; 252
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	09 c0       	rjmp	.+18     	; 0x3ac <vfprintf+0x23e>
 39a:	60 81       	ld	r22, Z
 39c:	71 81       	ldd	r23, Z+1	; 0x01
 39e:	07 2e       	mov	r0, r23
 3a0:	00 0c       	add	r0, r0
 3a2:	88 0b       	sbc	r24, r24
 3a4:	99 0b       	sbc	r25, r25
 3a6:	97 01       	movw	r18, r14
 3a8:	2e 5f       	subi	r18, 0xFE	; 254
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	79 01       	movw	r14, r18
 3ae:	1f 76       	andi	r17, 0x6F	; 111
 3b0:	31 2e       	mov	r3, r17
 3b2:	97 ff       	sbrs	r25, 7
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <vfprintf+0x25c>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	31 2f       	mov	r19, r17
 3c6:	30 68       	ori	r19, 0x80	; 128
 3c8:	33 2e       	mov	r3, r19
 3ca:	2a e0       	ldi	r18, 0x0A	; 10
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	ae 01       	movw	r20, r28
 3d0:	4f 5f       	subi	r20, 0xFF	; 255
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	0e 94 2b 04 	call	0x856	; 0x856 <__ultoa_invert>
 3d8:	48 2e       	mov	r4, r24
 3da:	4c 85       	ldd	r20, Y+12	; 0x0c
 3dc:	44 1a       	sub	r4, r20
 3de:	4a c0       	rjmp	.+148    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 3e0:	85 37       	cpi	r24, 0x75	; 117
 3e2:	29 f4       	brne	.+10     	; 0x3ee <vfprintf+0x280>
 3e4:	1f 7e       	andi	r17, 0xEF	; 239
 3e6:	a1 2e       	mov	r10, r17
 3e8:	2a e0       	ldi	r18, 0x0A	; 10
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	25 c0       	rjmp	.+74     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3ee:	51 2f       	mov	r21, r17
 3f0:	59 7f       	andi	r21, 0xF9	; 249
 3f2:	a5 2e       	mov	r10, r21
 3f4:	8f 36       	cpi	r24, 0x6F	; 111
 3f6:	c1 f0       	breq	.+48     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3f8:	18 f4       	brcc	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fa:	88 35       	cpi	r24, 0x58	; 88
 3fc:	79 f0       	breq	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fe:	bd c0       	rjmp	.+378    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 400:	80 37       	cpi	r24, 0x70	; 112
 402:	19 f0       	breq	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 404:	88 37       	cpi	r24, 0x78	; 120
 406:	21 f0       	breq	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 408:	b8 c0       	rjmp	.+368    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 40a:	85 2f       	mov	r24, r21
 40c:	80 61       	ori	r24, 0x10	; 16
 40e:	a8 2e       	mov	r10, r24
 410:	a4 fe       	sbrs	r10, 4
 412:	0d c0       	rjmp	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 414:	9a 2d       	mov	r25, r10
 416:	94 60       	ori	r25, 0x04	; 4
 418:	a9 2e       	mov	r10, r25
 41a:	09 c0       	rjmp	.+18     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 41c:	14 ff       	sbrs	r17, 4
 41e:	0a c0       	rjmp	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 420:	a5 2f       	mov	r26, r21
 422:	a6 60       	ori	r26, 0x06	; 6
 424:	aa 2e       	mov	r10, r26
 426:	06 c0       	rjmp	.+12     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 428:	28 e0       	ldi	r18, 0x08	; 8
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42e:	20 e1       	ldi	r18, 0x10	; 16
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	20 e1       	ldi	r18, 0x10	; 16
 436:	32 e0       	ldi	r19, 0x02	; 2
 438:	f7 01       	movw	r30, r14
 43a:	a7 fe       	sbrs	r10, 7
 43c:	08 c0       	rjmp	.+16     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 43e:	60 81       	ld	r22, Z
 440:	71 81       	ldd	r23, Z+1	; 0x01
 442:	82 81       	ldd	r24, Z+2	; 0x02
 444:	93 81       	ldd	r25, Z+3	; 0x03
 446:	a7 01       	movw	r20, r14
 448:	4c 5f       	subi	r20, 0xFC	; 252
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	07 c0       	rjmp	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 44e:	60 81       	ld	r22, Z
 450:	71 81       	ldd	r23, Z+1	; 0x01
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	a7 01       	movw	r20, r14
 458:	4e 5f       	subi	r20, 0xFE	; 254
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	7a 01       	movw	r14, r20
 45e:	ae 01       	movw	r20, r28
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	0e 94 2b 04 	call	0x856	; 0x856 <__ultoa_invert>
 468:	48 2e       	mov	r4, r24
 46a:	5c 85       	ldd	r21, Y+12	; 0x0c
 46c:	45 1a       	sub	r4, r21
 46e:	8a 2d       	mov	r24, r10
 470:	8f 77       	andi	r24, 0x7F	; 127
 472:	38 2e       	mov	r3, r24
 474:	36 fe       	sbrs	r3, 6
 476:	0d c0       	rjmp	.+26     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 478:	93 2d       	mov	r25, r3
 47a:	9e 7f       	andi	r25, 0xFE	; 254
 47c:	a9 2e       	mov	r10, r25
 47e:	4b 14       	cp	r4, r11
 480:	58 f4       	brcc	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 482:	34 fe       	sbrs	r3, 4
 484:	0b c0       	rjmp	.+22     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 486:	32 fc       	sbrc	r3, 2
 488:	09 c0       	rjmp	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48a:	a3 2d       	mov	r26, r3
 48c:	ae 7e       	andi	r26, 0xEE	; 238
 48e:	aa 2e       	mov	r10, r26
 490:	05 c0       	rjmp	.+10     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 492:	14 2d       	mov	r17, r4
 494:	a3 2c       	mov	r10, r3
 496:	03 c0       	rjmp	.+6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 498:	14 2d       	mov	r17, r4
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49c:	1b 2d       	mov	r17, r11
 49e:	a4 fe       	sbrs	r10, 4
 4a0:	0e c0       	rjmp	.+28     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a2:	fe 01       	movw	r30, r28
 4a4:	e4 0d       	add	r30, r4
 4a6:	f1 1d       	adc	r31, r1
 4a8:	80 81       	ld	r24, Z
 4aa:	80 33       	cpi	r24, 0x30	; 48
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ae:	ea 2d       	mov	r30, r10
 4b0:	e9 7e       	andi	r30, 0xE9	; 233
 4b2:	ae 2e       	mov	r10, r30
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4b6:	a2 fe       	sbrs	r10, 2
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4ba:	1e 5f       	subi	r17, 0xFE	; 254
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4be:	8a 2d       	mov	r24, r10
 4c0:	86 78       	andi	r24, 0x86	; 134
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c4:	1f 5f       	subi	r17, 0xFF	; 255
 4c6:	a3 fc       	sbrc	r10, 3
 4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4ca:	a0 fe       	sbrs	r10, 0
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4ce:	10 17       	cp	r17, r16
 4d0:	88 f4       	brcc	.+34     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4d2:	04 0d       	add	r16, r4
 4d4:	b0 2e       	mov	r11, r16
 4d6:	b1 1a       	sub	r11, r17
 4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4da:	10 17       	cp	r17, r16
 4dc:	60 f4       	brcc	.+24     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4de:	b6 01       	movw	r22, r12
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 4e8:	1f 5f       	subi	r17, 0xFF	; 255
 4ea:	f7 cf       	rjmp	.-18     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4ec:	10 17       	cp	r17, r16
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f0:	01 1b       	sub	r16, r17
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f4:	b4 2c       	mov	r11, r4
 4f6:	00 e0       	ldi	r16, 0x00	; 0
 4f8:	a4 fe       	sbrs	r10, 4
 4fa:	10 c0       	rjmp	.+32     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 4fc:	b6 01       	movw	r22, r12
 4fe:	80 e3       	ldi	r24, 0x30	; 48
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 506:	a2 fe       	sbrs	r10, 2
 508:	17 c0       	rjmp	.+46     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 50a:	a1 fc       	sbrc	r10, 1
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 50e:	88 e7       	ldi	r24, 0x78	; 120
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 514:	88 e5       	ldi	r24, 0x58	; 88
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	b6 01       	movw	r22, r12
 51a:	0c c0       	rjmp	.+24     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 51c:	8a 2d       	mov	r24, r10
 51e:	86 78       	andi	r24, 0x86	; 134
 520:	59 f0       	breq	.+22     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 522:	a1 fe       	sbrs	r10, 1
 524:	02 c0       	rjmp	.+4      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 526:	8b e2       	ldi	r24, 0x2B	; 43
 528:	01 c0       	rjmp	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52a:	80 e2       	ldi	r24, 0x20	; 32
 52c:	a7 fc       	sbrc	r10, 7
 52e:	8d e2       	ldi	r24, 0x2D	; 45
 530:	b6 01       	movw	r22, r12
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 538:	4b 14       	cp	r4, r11
 53a:	38 f4       	brcc	.+14     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 53c:	b6 01       	movw	r22, r12
 53e:	80 e3       	ldi	r24, 0x30	; 48
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 546:	ba 94       	dec	r11
 548:	f7 cf       	rjmp	.-18     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 54a:	4a 94       	dec	r4
 54c:	e1 e0       	ldi	r30, 0x01	; 1
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	ec 0f       	add	r30, r28
 552:	fd 1f       	adc	r31, r29
 554:	e4 0d       	add	r30, r4
 556:	f1 1d       	adc	r31, r1
 558:	80 81       	ld	r24, Z
 55a:	b6 01       	movw	r22, r12
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 562:	41 10       	cpse	r4, r1
 564:	f2 cf       	rjmp	.-28     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 566:	00 23       	and	r16, r16
 568:	09 f4       	brne	.+2      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 56a:	30 ce       	rjmp	.-928    	; 0x1cc <vfprintf+0x5e>
 56c:	b6 01       	movw	r22, r12
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 89 04 	call	0x912	; 0x912 <fputc>
 576:	01 50       	subi	r16, 0x01	; 1
 578:	f6 cf       	rjmp	.-20     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 57a:	f6 01       	movw	r30, r12
 57c:	87 81       	ldd	r24, Z+7	; 0x07
 57e:	90 85       	ldd	r25, Z+8	; 0x08
 580:	02 c0       	rjmp	.+4      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	9f ef       	ldi	r25, 0xFF	; 255
 586:	62 96       	adiw	r28, 0x12	; 18
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	af 90       	pop	r10
 5a6:	9f 90       	pop	r9
 5a8:	8f 90       	pop	r8
 5aa:	7f 90       	pop	r7
 5ac:	6f 90       	pop	r6
 5ae:	4f 90       	pop	r4
 5b0:	3f 90       	pop	r3
 5b2:	2f 90       	pop	r2
 5b4:	08 95       	ret

Disassembly of section .text.avrlibc:

00000afa <strnlen>:
 afa:	cf 92       	push	r12
 afc:	df 92       	push	r13
 afe:	ef 92       	push	r14
 b00:	6b 01       	movw	r12, r22
 b02:	e8 2e       	mov	r14, r24
 b04:	a8 2f       	mov	r26, r24
 b06:	cb 01       	movw	r24, r22
 b08:	41 15       	cp	r20, r1
 b0a:	51 05       	cpc	r21, r1
 b0c:	31 f4       	brne	.+12     	; 0xb1a <strnlen+0x20>
 b0e:	8c 19       	sub	r24, r12
 b10:	9d 09       	sbc	r25, r13
 b12:	ef 90       	pop	r14
 b14:	df 90       	pop	r13
 b16:	cf 90       	pop	r12
 b18:	08 95       	ret
 b1a:	fc 01       	movw	r30, r24
 b1c:	24 91       	lpm	r18, Z
 b1e:	a7 fd       	sbrc	r26, 7
 b20:	20 81       	ld	r18, Z
 b22:	22 23       	and	r18, r18
 b24:	a1 f3       	breq	.-24     	; 0xb0e <strnlen+0x14>
 b26:	01 96       	adiw	r24, 0x01	; 1
 b28:	a1 1d       	adc	r26, r1
 b2a:	41 50       	subi	r20, 0x01	; 1
 b2c:	51 09       	sbc	r21, r1
 b2e:	ec cf       	rjmp	.-40     	; 0xb08 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000912 <fputc>:
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	fb 01       	movw	r30, r22
 91c:	24 81       	ldd	r18, Z+4	; 0x04
 91e:	21 fd       	sbrc	r18, 1
 920:	03 c0       	rjmp	.+6      	; 0x928 <fputc+0x16>
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	9f ef       	ldi	r25, 0xFF	; 255
 926:	2c c0       	rjmp	.+88     	; 0x980 <fputc+0x6e>
 928:	22 ff       	sbrs	r18, 2
 92a:	16 c0       	rjmp	.+44     	; 0x958 <fputc+0x46>
 92c:	47 81       	ldd	r20, Z+7	; 0x07
 92e:	50 85       	ldd	r21, Z+8	; 0x08
 930:	25 81       	ldd	r18, Z+5	; 0x05
 932:	36 81       	ldd	r19, Z+6	; 0x06
 934:	42 17       	cp	r20, r18
 936:	53 07       	cpc	r21, r19
 938:	44 f4       	brge	.+16     	; 0x94a <fputc+0x38>
 93a:	a0 81       	ld	r26, Z
 93c:	b1 81       	ldd	r27, Z+1	; 0x01
 93e:	9d 01       	movw	r18, r26
 940:	2f 5f       	subi	r18, 0xFF	; 255
 942:	3f 4f       	sbci	r19, 0xFF	; 255
 944:	31 83       	std	Z+1, r19	; 0x01
 946:	20 83       	st	Z, r18
 948:	8c 93       	st	X, r24
 94a:	27 81       	ldd	r18, Z+7	; 0x07
 94c:	30 85       	ldd	r19, Z+8	; 0x08
 94e:	2f 5f       	subi	r18, 0xFF	; 255
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	30 87       	std	Z+8, r19	; 0x08
 954:	27 83       	std	Z+7, r18	; 0x07
 956:	14 c0       	rjmp	.+40     	; 0x980 <fputc+0x6e>
 958:	8b 01       	movw	r16, r22
 95a:	ec 01       	movw	r28, r24
 95c:	fb 01       	movw	r30, r22
 95e:	01 84       	ldd	r0, Z+9	; 0x09
 960:	f2 85       	ldd	r31, Z+10	; 0x0a
 962:	e0 2d       	mov	r30, r0
 964:	09 95       	icall
 966:	89 2b       	or	r24, r25
 968:	e1 f6       	brne	.-72     	; 0x922 <fputc+0x10>
 96a:	d8 01       	movw	r26, r16
 96c:	17 96       	adiw	r26, 0x07	; 7
 96e:	8d 91       	ld	r24, X+
 970:	9c 91       	ld	r25, X
 972:	18 97       	sbiw	r26, 0x08	; 8
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	18 96       	adiw	r26, 0x08	; 8
 978:	9c 93       	st	X, r25
 97a:	8e 93       	st	-X, r24
 97c:	17 97       	sbiw	r26, 0x07	; 7
 97e:	ce 01       	movw	r24, r28
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

Disassembly of section .text.avrlibc:

00000856 <__ultoa_invert>:
 856:	fa 01       	movw	r30, r20
 858:	aa 27       	eor	r26, r26
 85a:	28 30       	cpi	r18, 0x08	; 8
 85c:	51 f1       	breq	.+84     	; 0x8b2 <__ultoa_invert+0x5c>
 85e:	20 31       	cpi	r18, 0x10	; 16
 860:	81 f1       	breq	.+96     	; 0x8c2 <__ultoa_invert+0x6c>
 862:	e8 94       	clt
 864:	6f 93       	push	r22
 866:	6e 7f       	andi	r22, 0xFE	; 254
 868:	6e 5f       	subi	r22, 0xFE	; 254
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	af 4f       	sbci	r26, 0xFF	; 255
 872:	b1 e0       	ldi	r27, 0x01	; 1
 874:	3e d0       	rcall	.+124    	; 0x8f2 <__ultoa_invert+0x9c>
 876:	b4 e0       	ldi	r27, 0x04	; 4
 878:	3c d0       	rcall	.+120    	; 0x8f2 <__ultoa_invert+0x9c>
 87a:	67 0f       	add	r22, r23
 87c:	78 1f       	adc	r23, r24
 87e:	89 1f       	adc	r24, r25
 880:	9a 1f       	adc	r25, r26
 882:	a1 1d       	adc	r26, r1
 884:	68 0f       	add	r22, r24
 886:	79 1f       	adc	r23, r25
 888:	8a 1f       	adc	r24, r26
 88a:	91 1d       	adc	r25, r1
 88c:	a1 1d       	adc	r26, r1
 88e:	6a 0f       	add	r22, r26
 890:	71 1d       	adc	r23, r1
 892:	81 1d       	adc	r24, r1
 894:	91 1d       	adc	r25, r1
 896:	a1 1d       	adc	r26, r1
 898:	20 d0       	rcall	.+64     	; 0x8da <__ultoa_invert+0x84>
 89a:	09 f4       	brne	.+2      	; 0x89e <__ultoa_invert+0x48>
 89c:	68 94       	set
 89e:	3f 91       	pop	r19
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	26 9f       	mul	r18, r22
 8a4:	11 24       	eor	r1, r1
 8a6:	30 19       	sub	r19, r0
 8a8:	30 5d       	subi	r19, 0xD0	; 208
 8aa:	31 93       	st	Z+, r19
 8ac:	de f6       	brtc	.-74     	; 0x864 <__ultoa_invert+0xe>
 8ae:	cf 01       	movw	r24, r30
 8b0:	08 95       	ret
 8b2:	46 2f       	mov	r20, r22
 8b4:	47 70       	andi	r20, 0x07	; 7
 8b6:	40 5d       	subi	r20, 0xD0	; 208
 8b8:	41 93       	st	Z+, r20
 8ba:	b3 e0       	ldi	r27, 0x03	; 3
 8bc:	0f d0       	rcall	.+30     	; 0x8dc <__ultoa_invert+0x86>
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__ultoa_invert+0x5c>
 8c0:	f6 cf       	rjmp	.-20     	; 0x8ae <__ultoa_invert+0x58>
 8c2:	46 2f       	mov	r20, r22
 8c4:	4f 70       	andi	r20, 0x0F	; 15
 8c6:	40 5d       	subi	r20, 0xD0	; 208
 8c8:	4a 33       	cpi	r20, 0x3A	; 58
 8ca:	18 f0       	brcs	.+6      	; 0x8d2 <__ultoa_invert+0x7c>
 8cc:	49 5d       	subi	r20, 0xD9	; 217
 8ce:	31 fd       	sbrc	r19, 1
 8d0:	40 52       	subi	r20, 0x20	; 32
 8d2:	41 93       	st	Z+, r20
 8d4:	02 d0       	rcall	.+4      	; 0x8da <__ultoa_invert+0x84>
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__ultoa_invert+0x6c>
 8d8:	ea cf       	rjmp	.-44     	; 0x8ae <__ultoa_invert+0x58>
 8da:	b4 e0       	ldi	r27, 0x04	; 4
 8dc:	a6 95       	lsr	r26
 8de:	97 95       	ror	r25
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	ba 95       	dec	r27
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__ultoa_invert+0x86>
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	61 05       	cpc	r22, r1
 8ee:	71 05       	cpc	r23, r1
 8f0:	08 95       	ret
 8f2:	9b 01       	movw	r18, r22
 8f4:	ac 01       	movw	r20, r24
 8f6:	0a 2e       	mov	r0, r26
 8f8:	06 94       	lsr	r0
 8fa:	57 95       	ror	r21
 8fc:	47 95       	ror	r20
 8fe:	37 95       	ror	r19
 900:	27 95       	ror	r18
 902:	ba 95       	dec	r27
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__ultoa_invert+0xa2>
 906:	62 0f       	add	r22, r18
 908:	73 1f       	adc	r23, r19
 90a:	84 1f       	adc	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	a0 1d       	adc	r26, r0
 910:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000ac2 <__prologue_saves__>:
 ac2:	2f 92       	push	r2
 ac4:	3f 92       	push	r3
 ac6:	4f 92       	push	r4
 ac8:	5f 92       	push	r5
 aca:	6f 92       	push	r6
 acc:	7f 92       	push	r7
 ace:	8f 92       	push	r8
 ad0:	9f 92       	push	r9
 ad2:	af 92       	push	r10
 ad4:	bf 92       	push	r11
 ad6:	cf 92       	push	r12
 ad8:	df 92       	push	r13
 ada:	ef 92       	push	r14
 adc:	ff 92       	push	r15
 ade:	0f 93       	push	r16
 ae0:	1f 93       	push	r17
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	ca 1b       	sub	r28, r26
 aec:	db 0b       	sbc	r29, r27
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000b30 <__epilogue_restores__>:
 b30:	2a 88       	ldd	r2, Y+18	; 0x12
 b32:	39 88       	ldd	r3, Y+17	; 0x11
 b34:	48 88       	ldd	r4, Y+16	; 0x10
 b36:	5f 84       	ldd	r5, Y+15	; 0x0f
 b38:	6e 84       	ldd	r6, Y+14	; 0x0e
 b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b40:	aa 84       	ldd	r10, Y+10	; 0x0a
 b42:	b9 84       	ldd	r11, Y+9	; 0x09
 b44:	c8 84       	ldd	r12, Y+8	; 0x08
 b46:	df 80       	ldd	r13, Y+7	; 0x07
 b48:	ee 80       	ldd	r14, Y+6	; 0x06
 b4a:	fd 80       	ldd	r15, Y+5	; 0x05
 b4c:	0c 81       	ldd	r16, Y+4	; 0x04
 b4e:	1b 81       	ldd	r17, Y+3	; 0x03
 b50:	aa 81       	ldd	r26, Y+2	; 0x02
 b52:	b9 81       	ldd	r27, Y+1	; 0x01
 b54:	ce 0f       	add	r28, r30
 b56:	d1 1d       	adc	r29, r1
 b58:	0f b6       	in	r0, 0x3f	; 63
 b5a:	f8 94       	cli
 b5c:	de bf       	out	0x3e, r29	; 62
 b5e:	0f be       	out	0x3f, r0	; 63
 b60:	cd bf       	out	0x3d, r28	; 61
 b62:	ed 01       	movw	r28, r26
 b64:	08 95       	ret
