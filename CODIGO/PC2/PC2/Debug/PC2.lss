
PC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000297  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e3  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006aa  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d1  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    000000fc  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000024  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
   c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  1c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  54:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  58:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  5c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  60:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001e2 <__bad_interrupt>:
 1e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c2 <main>:

uint8_t startSem;

int main(void)
{
	cli();
  c2:	f8 94       	cli
	/*PD2 -> INPUT AND INTERRUPT*/
	DDRD &=~ (1U<<2);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  1U<<2;		//PULL UP ENABLE
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8b b9       	out	0x0b, r24	; 11
	//INT0
	EICRA |= 1U<<ISC01;			//falling edge sensitivity (INT0)
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
	EIMSK |= 1U<<INT0;			//mask INT0
  da:	8d b3       	in	r24, 0x1d	; 29
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8d bb       	out	0x1d, r24	; 29
	sei();
  e0:	78 94       	sei
	/* PB0-PB7 Y PC0-PC3 DIGITAL OUTPUT*/
	DDRB = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x0F;
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8f 60       	ori	r24, 0x0F	; 15
  ea:	87 b9       	out	0x07, r24	; 7
    while(1)
    {
        //TODO:: Please write your application code 
		if(startSem){
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <main+0x2a>
			//secuencia 1
			//S1 -> VERDE, S2 -> ROJO, S3 -> VERDE , S4 -> ROJO
			PORTB = 0x0;
  f4:	15 b8       	out	0x05, r1	; 5
			PORTC &=~(0xF);
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	88 b9       	out	0x08, r24	; 8
			PORTB |= 1U<<0; PORTB |= 1U<<5; PORTB |= 1U<<6; PORTC |= 1U<<3;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	85 b9       	out	0x05, r24	; 5
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 62       	ori	r24, 0x20	; 32
 106:	85 b9       	out	0x05, r24	; 5
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	88 60       	ori	r24, 0x08	; 8
 112:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x58>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x62>
 124:	00 00       	nop
			_delay_ms(8000);
			//secuencia 2
			//S1 -> AMBAR, S2 -> ROJO, S3 -> AMBAR , S4 -> ROJO
			PORTB = 0x0;
 126:	15 b8       	out	0x05, r1	; 5
			PORTC &=~(0xF);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	88 b9       	out	0x08, r24	; 8
			PORTB |= 1U<<1; PORTB |= 1U<<5; PORTB |= 1U<<7; PORTC |= 1U<<3;
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 b9       	out	0x05, r24	; 5
 134:	85 b1       	in	r24, 0x05	; 5
 136:	80 62       	ori	r24, 0x20	; 32
 138:	85 b9       	out	0x05, r24	; 5
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	85 b9       	out	0x05, r24	; 5
 140:	88 b1       	in	r24, 0x08	; 8
 142:	88 60       	ori	r24, 0x08	; 8
 144:	88 b9       	out	0x08, r24	; 8
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 e6       	ldi	r24, 0x69	; 105
 14a:	98 e1       	ldi	r25, 0x18	; 24
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x8a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x94>
 156:	00 00       	nop
			_delay_ms(8000);
			//secuencia 3
			//S1 -> ROJO, S2 -> VERDE, S3 -> ROJO , S4 -> VERDE
			PORTB = 0x0;
 158:	15 b8       	out	0x05, r1	; 5
			PORTC &=~(0xF);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	88 b9       	out	0x08, r24	; 8
			PORTB |= 1U<<2; PORTB |= 1U<<3; PORTC |= 1U<<0; PORTC |= 1U<<1;
 160:	85 b1       	in	r24, 0x05	; 5
 162:	84 60       	ori	r24, 0x04	; 4
 164:	85 b9       	out	0x05, r24	; 5
 166:	85 b1       	in	r24, 0x05	; 5
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	88 b9       	out	0x08, r24	; 8
 172:	88 b1       	in	r24, 0x08	; 8
 174:	82 60       	ori	r24, 0x02	; 2
 176:	88 b9       	out	0x08, r24	; 8
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	9c e0       	ldi	r25, 0x0C	; 12
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xbc>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xc6>
 188:	00 00       	nop
			_delay_ms(4000);
			//secuencia 4
			//S1 -> ROJO, S2 -> AMBAR, S3 -> ROJO , S4 -> AMBAR
			PORTB = 0x0;
 18a:	15 b8       	out	0x05, r1	; 5
			PORTC &=~(0xF);
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	88 b9       	out	0x08, r24	; 8
			PORTB |= 1U<<2; PORTB |= 1U<<4; PORTC |= 1U<<0; PORTC |= 1U<<2;
 192:	85 b1       	in	r24, 0x05	; 5
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 b9       	out	0x05, r24	; 5
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	88 b9       	out	0x08, r24	; 8
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	9c e0       	ldi	r25, 0x0C	; 12
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0xee>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0xf8>
 1ba:	00 00       	nop
 1bc:	97 cf       	rjmp	.-210    	; 0xec <main+0x2a>

Disassembly of section .text.__vector_1:

000001be <__vector_1>:

/************************************************************************/
/*								ISR                                     */
/************************************************************************/
/*ISR INT0*/
ISR(INT0_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
	startSem = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	EIMSK &=~ (1U<<INT0);			//mask INT0
 1d0:	8d b3       	in	r24, 0x1d	; 29
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	8d bb       	out	0x1d, r24	; 29
	return;
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti
