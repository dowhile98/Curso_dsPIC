
EP1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001e1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3b  00000000  00000000  0000021f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000015a  0000015a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ExternalIT_Config 0000001e  0000013c  0000013c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000007e  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000003e  000000fe  000000fe  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_1>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.ExternalIT_Config:

0000013c <ExternalIT_Config>:
/************************************************************************/
/*			DEFINICION DE FUNCIONES                                     */
/************************************************************************/
void ExternalIT_Config(void){
	// Configure PD2 as an input using the Data Direction Register D (DDRD)
	DDRD &= ~_BV(DDD2);
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	8a b9       	out	0x0a, r24	; 10
	// Enable the pull-up resistor on PD2 using the Port D
	PORTD |= _BV(PORTD2);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	84 60       	ori	r24, 0x04	; 4
 146:	8b b9       	out	0x0b, r24	; 11
	EICRA |= 1U<<ISC01;			//falling edge sensitivity (INT0)
 148:	e9 e6       	ldi	r30, 0x69	; 105
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
	EIMSK |= 1U<<INT0;			//mask INT0
 152:	8d b3       	in	r24, 0x1d	; 29
 154:	81 60       	ori	r24, 0x01	; 1
 156:	8d bb       	out	0x1d, r24	; 29
 158:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
/************************************************************************/


int main(void)
{
	cli();					//Deshabilita las interrupciones
  80:	f8 94       	cli
	//configura INT0
	ExternalIT_Config();
  82:	0e 94 9e 00 	call	0x13c	; 0x13c <ExternalIT_Config>
	//PINES DE CONTROL DE MOTOR
	DDRC |= 1U<<1 | 1<<0;	//PC0-PC1 ->salida digital
  86:	87 b1       	in	r24, 0x07	; 7
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	87 b9       	out	0x07, r24	; 7
	//interruptor
	DDRD &=~ (1U<<7);		//PD7 INPUT;
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1U<<7;			//PULL UP
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8b b9       	out	0x0b, r24	; 11
	//INDICADORES
	DDRB |= 1U<<6 | 1U<<5 | 1U<<4 | 1U<<4 | 1U<<3 | 1U<<2 | 1U<<1;
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	8e 67       	ori	r24, 0x7E	; 126
  9c:	84 b9       	out	0x04, r24	; 4
	
	/************************************************************************/
	/*					START                                               */
	/************************************************************************/
	while(1){
		if(!(PIND & 1U<<7)){
  9e:	4f 99       	sbic	0x09, 7	; 9
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	87 ea       	ldi	r24, 0xA7	; 167
  a4:	91 e6       	ldi	r25, 0x61	; 97
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x26>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
			break;
		}
		_delay_ms(50);
	}
	/************************************************************************/
	sei();					//habilita las interrupciones
  ae:	78 94       	sei
  b0:	07 c0       	rjmp	.+14     	; 0xc0 <main+0x40>
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	ef cf       	rjmp	.-34     	; 0x9e <main+0x1e>
    while(1)
    {
        //TODO:: Please write your application code 
		//GIRTO IZQUIERDO
		PORTC |= 1U<<1;
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	88 b9       	out	0x08, r24	; 8
		PORTC &=~ (1U);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	24 e3       	ldi	r18, 0x34	; 52
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	91 50       	subi	r25, 0x01	; 1
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
		//GIRO DERECHA
		_delay_ms(4000);
		PORTC |= 1U;
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	88 b9       	out	0x08, r24	; 8
		PORTC &=~ (1U<<1);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	24 e3       	ldi	r18, 0x34	; 52
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x70>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
  fc:	e1 cf       	rjmp	.-62     	; 0xc0 <main+0x40>

Disassembly of section .text.__vector_1:

000000fe <__vector_1>:

/************************************************************************/
/*              ISR                                                     */
/************************************************************************/

ISR(INT0_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	//ilimina los leds
	PORTB |= 0x3F<<1;
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8e 67       	ori	r24, 0x7E	; 126
 112:	85 b9       	out	0x05, r24	; 5
 114:	2f e3       	ldi	r18, 0x3F	; 63
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <__vector_1+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__vector_1+0x26>
 124:	00 00       	nop
	_delay_ms(1000);
	PORTB &=~(0x3F<<1);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	81 78       	andi	r24, 0x81	; 129
 12a:	85 b9       	out	0x05, r24	; 5
	
	return;
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti
